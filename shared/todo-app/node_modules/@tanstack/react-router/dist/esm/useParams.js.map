{"version":3,"file":"useParams.js","sources":["../../src/useParams.tsx"],"sourcesContent":["import { AnyRoute } from './route'\nimport { RouteIds, RouteById, AllParams } from './routeInfo'\nimport { RegisteredRouter } from './router'\nimport { Expand, last } from './utils'\nimport { useRouterState } from './useRouterState'\nimport { StrictOrFrom } from './utils'\nimport { getRenderedMatches } from './Matches'\n\nexport function useParams<\n  TRouteTree extends AnyRoute = RegisteredRouter['routeTree'],\n  TFrom extends RouteIds<TRouteTree> = RouteIds<TRouteTree>,\n  TReturnIntersection extends boolean = false,\n  TParams = TReturnIntersection extends false\n    ? RouteById<TRouteTree, TFrom>['types']['allParams']\n    : Expand<Partial<AllParams<TRouteTree>>>,\n  TSelected = TParams,\n>(\n  opts: StrictOrFrom<TFrom, TReturnIntersection> & {\n    select?: (params: TParams) => TSelected\n  },\n): TSelected {\n  return useRouterState({\n    select: (state: any) => {\n      const params = (last(getRenderedMatches(state)) as any)?.params\n      return opts?.select ? opts.select(params) : params\n    },\n  })\n}\n"],"names":[],"mappings":";;;AAQO,SAAS,UASd,MAGW;AACX,SAAO,eAAe;AAAA,IACpB,QAAQ,CAAC,UAAe;;AACtB,YAAM,UAAU,UAAK,mBAAmB,KAAK,CAAC,MAA9B,mBAAyC;AACzD,cAAO,6BAAM,UAAS,KAAK,OAAO,MAAM,IAAI;AAAA,IAC9C;AAAA,EAAA,CACD;AACH;"}