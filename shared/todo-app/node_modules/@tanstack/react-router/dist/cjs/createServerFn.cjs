"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const invariant = require("tiny-invariant");
const serverFnReturnTypeHeader = "server-fn-return-type";
const serverFnPayloadTypeHeader = "server-fn-payload-type";
function createServerFn(method, fn) {
  const compiledFn = fn;
  invariant(
    compiledFn.url,
    `createServerFn must be called with a function that is marked with the 'use server' pragma.`
  );
  return Object.assign(
    async (payload, opts) => {
      return compiledFn({
        method,
        payload: payload || void 0,
        requestInit: opts == null ? void 0 : opts.requestInit
      });
    },
    {
      url: fn.url
    }
  );
}
function json(payload, opts) {
  return new Response(JSON.stringify(payload), {
    status: (opts == null ? void 0 : opts.status) || 200,
    statusText: (opts == null ? void 0 : opts.statusText) || (opts == null ? void 0 : opts.status) === 200 ? "OK" : "Error",
    headers: {
      "Content-Type": "application/json",
      [serverFnReturnTypeHeader]: "json",
      ...opts == null ? void 0 : opts.headers
    }
  });
}
exports.createServerFn = createServerFn;
exports.json = json;
exports.serverFnPayloadTypeHeader = serverFnPayloadTypeHeader;
exports.serverFnReturnTypeHeader = serverFnReturnTypeHeader;
//# sourceMappingURL=createServerFn.cjs.map
